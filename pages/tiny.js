import { useEffect, useState } from 'react';
import Head from 'next/head';
import { Editor } from "@tinymce/tinymce-react";
import axios from "axios";
import Navbar from '@components/Navbar';
import Shimmer from '@components/Shimmer';

export default function Tiny() {
  const [value, setValue] = useState(`<h2>What to expect from here on out</h2>
      <p>https://dummyimage.com/640x360/fff/aaa</p>
      <p>https://www.youtube.com/watch?v=YHHsfnItLgA</p>
      <p>What follows from here is just a bunch of absolute nonsense I've written to dogfood the plugin itself. It includes every sensible typographic element I could think of, like <strong>bold text</strong>, unordered lists, ordered lists, code blocks, block quotes, <em>and even italics</em>.</p>
      <p>It's important to cover all of these use cases for a few reasons:</p>
      <ol>
        <li>We want everything to look good out of the box.</li>
        <li>Really just the first reason, that's the whole point of the plugin.</li>
        <li>Here's a third pretend reason though a list with three items looks more realistic than a list with two items.</li>
      </ol>
      <p>Now we're going to try out another header style.</p>
      <h3>Typography should be easy</h3>
      <p>So that's a header for you â€” with any luck if we've done our job correctly that will look pretty reasonable.</p>
      <p>Something a wise person once told me about typography is:</p>
      <blockquote><p>Typography is pretty important if you don't want your stuff to look like trash. Make it good then it won't be bad.</p></blockquote>
      <p>It's probably important that images look okay here by default as well:</p>`);
  const [mounted, setMounted] = useState(false);
  useEffect(() => {
    setTimeout(() => {
      setMounted(true);
    }, 300);
  }, []);

  // TODO Docs: https://www.tiny.cloud/docs/tinymce/6/file-image-upload/#example-using-images_upload_handler
  async function image_upload_handler(blobInfo, progress) {
    console.log(blobInfo)
    console.log(blobInfo.blob())
    console.log(blobInfo.filename())
    console.log(blobInfo)
    console.log(progress)
    let imageFile = new FormData();
    imageFile.append("image", blobInfo.blob());
    try {
      const res = await axios.post("https://api.imgbb.com/1/upload?expiration=600&key=3370154ba7d4e63c7c5b9cedcf3ca7a7", imageFile, {
        // TODO Docs: https://gist.github.com/virolea/e1af9359fe071f24de3da3500ff0f429
        onUploadProgress: function (progressEvent) {
          var percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)
          progress(percentCompleted)
        }
      })
      console.log("res", res)
      if (res.status == 200) {
        return res.data?.data?.display_url;
      }
    } catch (error) {
      console.error("error", error)
      return ({ message: 'HTTP Error: ' + error.status, remove: true });
    }
  };

  return (
    <div>
      <Head>
        <title>TinyMCE</title>
        <meta name="description" description="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar />

      <main className="dark:bg-neutral-900 min-h-screen">
        <div className="max-w-5xl mx-auto p-3">
          <h1 className="text-3xl text-neutral-800 dark:text-white font-semibold tracking-wide mb-8">
            TinyMCE
          </h1>

          {mounted ?
            <Editor
              id="Editor"
              tinymceScriptSrc='/tinymce/tinymce.min.js'
              value={value}
              onEditorChange={setValue}
              init={{
                mobile: {
                  menubar: true
                },
                height: 200,
                promotion: false,
                file_picker_types: 'image',
                images_upload_handler: image_upload_handler,
                // TODO Docs: https://www.tiny.cloud/docs/tinymce/6/file-image-upload/#example-using-file_picker_callback
                // TODO Docs: https://www.tiny.cloud/docs/configure/file-image-upload/#interactiveexample
                file_picker_callback: function (cb, value, meta) {
                  var input = document.createElement('input');
                  input.setAttribute('type', 'file');
                  input.setAttribute('accept', 'image/*');
                  input.onchange = function () {
                    var file = this.files[0];
                    var reader = new FileReader();
                    reader.onload = function () {
                      var id = 'blobid' + (new Date()).getTime();
                      var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                      var base64 = reader.result.split(',')[1];
                      var blobInfo = blobCache.create(id, file, base64);
                      blobCache.add(blobInfo);
                      cb(blobInfo.blobUri(), { title: file.name });
                    };
                    reader.readAsDataURL(file);
                  };
                  input.click();
                },
                // TODO Docs : https://www.tiny.cloud/docs/tinymce/6/available-toolbar-buttons/
                // TODO Docs : https://www.tiny.cloud/docs/tinymce/6/accordion/
                plugins: ['autoresize', 'image', 'link', 'autolink', 'media', 'table', 'codesample', 'lists', 'code', 'anchor', 'accordion', 'advlist', 'emoticons', 'fullscreen', 'insertdatetime', 'preview', 'searchreplace', 'visualblocks', 'visualchars'],
                toolbar: 'undo redo | blocks fontsize bold italic underline | align indent outdent bullist numlist | link anchor image media audio codesample | removeformat',
              }}
            />
            :
            <Shimmer>
              <div className='h-8 max-w-sm rounded bg-neutral-300/70 dark:bg-neutral-700/50'></div>
              <div className='mt-2 h-8 w-full rounded bg-neutral-300/70 dark:bg-neutral-700/50'></div>
              <div className='mt-4 h-32 w-full rounded bg-neutral-300/70 dark:bg-neutral-700/50'></div>
            </Shimmer>
          }

          <h2 className="text-xl dark:text-white font-semibold mb-4 border-b dark:border-b-neutral-700 pb-2 pt-4">HTML</h2>
          <div className="pb-8">
            {value &&
              <div >
                {value}
              </div>
            }
          </div>

          <h2 className="text-xl dark:text-white font-semibold mb-4 border-b dark:border-b-neutral-700 pb-2">Preview</h2>
          <div className="p-0 prose dark:prose-invert" dangerouslySetInnerHTML={{ __html: value }} />
        </div>
      </main>
    </div>
  )
}